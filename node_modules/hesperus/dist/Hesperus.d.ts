import { Client } from 'discord.js';
/**
 * This interface represents options that can be provided
 * when enabling Hesperus.
 */
export interface HesperusOptions {
    /** Current work (root) directory. */
    rootDir: string;
    /** Folder to search for commands in. */
    commandsFolder?: string;
    /** Folder to search for events in. */
    eventsFolder?: string;
    /** Array of IDs, represents IDs of bot owners. */
    botOwners: string[];
    /** Array of IDS, represents IDs of Guilds to deploy commands to. */
    guildIds?: string[];
    /** Settings for error messages, can be shown to users. */
    errorMessages?: {
        /** Should we reply to message with errors, or send it to the channel. */
        reply?: boolean;
        /** Message for `onlyOwner` error. */
        onlyOwner?: string;
    };
    /** Extensions of commands to search for. */
    extensions?: string[];
}
/**
 * Place, where Hesperus starts.
 * @see https://hesperus.js.org/
 */
export declare class Hesperus {
    private readonly client;
    private readonly options;
    /** Array of JSON objects, containing information about commands. */
    private commands;
    /** Command files from commands directory. */
    private readonly commandFiles;
    /** Path to commands directory. */
    private readonly commandsPath;
    /** Collection of commands with instances for handling. */
    private readonly clientCommands;
    /**
     * @param {Client} client Instance of Client to listen events on.
     * @param {HesperusOptions} options Handler's options.
     */
    constructor(client: Client, options: HesperusOptions);
    /**
     * This method allows you to deploy all slash commands of the bot.
     */
    deployCommands(): Promise<void>;
    /**
     * Method for checking and sending message if command is owner-only,
     * but user isn't an owner.
     *
     * @param {boolean} onlyOwners Whether this command is owner-only.
     * @param {CommandInteraction} interaction Interaction to reply to.
     * @private
     * @ignore
     */
    private isCommandOwnerOnly;
    /**
     * This method allows you to deploy the global slash commands of the bot.
     *
     * @param {REST} rest REST manager for publishing commands
     * @param {JSON[]} commands An array of commands to deploy.
     */
    private deployGlobalCommands;
    /**
     * This method allows you to deploy the guild slash commands of the bot.
     *
     * @param {REST} rest REST manager for publishing commands
     * @param {string} guildId ID of the Guild to publish commands to.
     * @param {JSON[]} commands An array of commands to deploy.
     */
    private deployGuildCommands;
    /**
     * This method loads commands from files into JSON array.
     */
    private loadCommandsFromFiles;
}
