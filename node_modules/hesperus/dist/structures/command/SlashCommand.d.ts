import { Client, Collection, CommandInteraction } from 'discord.js';
import { SlashSubCommandGroup } from './SlashSubCommandGroup';
import { LocalizationMap } from 'discord-api-types/v10';
import { SlashCommandOption } from './SlashCommandOption';
/**
 * Type of this slash command (usually, CHAT_INPUT).
 */
export declare enum SlashCommandType {
    /** Slash command; Starts with `/` and being typed in a chat. */
    CHAT_INPUT = 1,
    /** UI-based command, shows when you click on a user. */
    USER = 2,
    /** UI-based command, shows when you click on a message. */
    MESSAGE = 3
}
/**
 * This interface represents options that can be provided when
 * creating a new command.
 */
export interface SlashCommandOptions {
    /** Name of this slash command. */
    name: string;
    /** Localizations for name of this slash command. */
    nameLocalizations?: LocalizationMap;
    /** Type of this slash command. */
    type?: SlashCommandType;
    /** Description of this slash command. */
    description: string;
    /** Localizations for description of this slash command. */
    descriptionLocalizations?: LocalizationMap;
    /** Subcommands of this slash command. */
    subCommands?: SlashCommand[];
    /** Options of this slash command. */
    options?: SlashCommandOption[];
    /** Whether this slash command is available in DMs (default value is `true`). */
    dmPermission?: boolean;
    /** Subcommand groups of this slash command. */
    subCommandGroups?: SlashSubCommandGroup[];
    /**
     * Whether this slash command can be only used by bot owners
     * (default value is `false`).
     */
    onlyOwners?: boolean;
    /**
     * Callback function that will be called if this slash command
     * being used (must be async).
     *
     * @param {Client} client Instance of client.
     * @param {CommandInteraction} interaction Instance of received interaction.
     */
    callback?(client: Client, interaction: CommandInteraction): Promise<void>;
}
/**
 * This class represents bot slash command.
 */
export declare class SlashCommand {
    private readonly _options;
    /** Collection of subcommands, assigned to this slash command. */
    readonly subCommandsCollection: Collection<string, SlashCommand>;
    /** Collection of subcommand groups, assigned to this slash command. */
    readonly subCommandGroupsCollection: Collection<string, SlashSubCommandGroup>;
    /**
     * @param {SlashCommandOptions} _options Options for this command.
     */
    constructor(_options: SlashCommandOptions);
    /**
     * Type of this slash command.
     *
     * @return {string}
     */
    get name(): string;
    /**
     * Localizations for name of this slash command.
     *
     * @return {LocalizationMap}
     */
    get nameLocalizations(): LocalizationMap;
    /**
     * Localizations for name of this slash command.
     *
     * @return {SlashCommandType}
     */
    get type(): SlashCommandType;
    /**
     * Description of this slash command.
     *
     * @return {string}
     */
    get description(): string;
    /**
     * Localizations for description of this slash command.
     *
     * @return {LocalizationMap}
     */
    get descriptionLocalizations(): LocalizationMap;
    /**
     * Subcommands of this slash command.
     *
     * @return {SlashCommand[] | undefined}
     */
    get subCommands(): SlashCommand[] | undefined;
    /**
     * Options of this slash command.
     *
     * @return {SlashCommand[] | undefined}
     */
    get options(): SlashCommandOption[] | undefined;
    /**
     * Whether this slash command is available in DMs
     * (default value is `true`).
     *
     * @return {boolean}
     */
    get dmPermission(): boolean;
    /**
     * Subcommand groups of this slash command.
     *
     * @return {SlashSubCommandGroup[] | undefined}
     */
    get subCommandGroups(): SlashSubCommandGroup[] | undefined;
    /**
     * Whether this slash command can be only used by bot owners
     * (default value is `false`).
     *
     * @return {boolean}
     */
    get onlyOwners(): boolean;
    /**
     * Callback function that will be called if this slash command
     * being used (must be async).
     *
     * @return {Function}
     */
    get callback(): Function;
    /**
     * This method allows you to convert this class to suitable
     * (for Discord) JSON.
     *
     * @return {object} Converted class.
     */
    toJSON(): object;
}
