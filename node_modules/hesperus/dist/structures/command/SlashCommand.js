"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SlashCommand = exports.SlashCommandType = void 0;
/* eslint-disable no-unused-vars */
const discord_js_1 = require("discord.js");
/**
 * Type of this slash command (usually, CHAT_INPUT).
 */
var SlashCommandType;
(function (SlashCommandType) {
    /** Slash command; Starts with `/` and being typed in a chat. */
    SlashCommandType[SlashCommandType["CHAT_INPUT"] = 1] = "CHAT_INPUT";
    /** UI-based command, shows when you click on a user. */
    SlashCommandType[SlashCommandType["USER"] = 2] = "USER";
    /** UI-based command, shows when you click on a message. */
    SlashCommandType[SlashCommandType["MESSAGE"] = 3] = "MESSAGE";
})(SlashCommandType = exports.SlashCommandType || (exports.SlashCommandType = {}));
/**
 * This class represents bot slash command.
 */
class SlashCommand {
    /**
     * @param {SlashCommandOptions} _options Options for this command.
     */
    constructor(_options) {
        this._options = _options;
        /** Collection of subcommands, assigned to this slash command. */
        this.subCommandsCollection = new discord_js_1.Collection();
        /** Collection of subcommand groups, assigned to this slash command. */
        this.subCommandGroupsCollection = new discord_js_1.Collection();
        !this._options.onlyOwners ? this._options.onlyOwners = false : '';
        !this._options.type ? this._options.type = SlashCommandType.CHAT_INPUT : '';
    }
    /**
     * Type of this slash command.
     *
     * @return {string}
     */
    get name() {
        return this._options.name;
    }
    /**
     * Localizations for name of this slash command.
     *
     * @return {LocalizationMap}
     */
    get nameLocalizations() {
        return this._options.nameLocalizations;
    }
    /**
     * Localizations for name of this slash command.
     *
     * @return {SlashCommandType}
     */
    get type() {
        return this._options.type;
    }
    /**
     * Description of this slash command.
     *
     * @return {string}
     */
    get description() {
        return this._options.description;
    }
    /**
     * Localizations for description of this slash command.
     *
     * @return {LocalizationMap}
     */
    get descriptionLocalizations() {
        return this._options.descriptionLocalizations;
    }
    /**
     * Subcommands of this slash command.
     *
     * @return {SlashCommand[] | undefined}
     */
    get subCommands() {
        return this._options.subCommands;
    }
    /**
     * Options of this slash command.
     *
     * @return {SlashCommand[] | undefined}
     */
    get options() {
        return this._options.options;
    }
    /**
     * Whether this slash command is available in DMs
     * (default value is `true`).
     *
     * @return {boolean}
     */
    get dmPermission() {
        return this._options.dmPermission;
    }
    /**
     * Subcommand groups of this slash command.
     *
     * @return {SlashSubCommandGroup[] | undefined}
     */
    get subCommandGroups() {
        return this._options.subCommandGroups;
    }
    /**
     * Whether this slash command can be only used by bot owners
     * (default value is `false`).
     *
     * @return {boolean}
     */
    get onlyOwners() {
        return this._options.onlyOwners;
    }
    /**
     * Callback function that will be called if this slash command
     * being used (must be async).
     *
     * @return {Function}
     */
    get callback() {
        return this._options.callback;
    }
    /**
     * This method allows you to convert this class to suitable
     * (for Discord) JSON.
     *
     * @return {object} Converted class.
     */
    toJSON() {
        const response = {
            name: this.name,
            type: this.type,
            description: this.description,
            ...(this.dmPermission && { dm_permission: this.dmPermission }),
            ...(this.nameLocalizations && { name_localizations: this.nameLocalizations }),
            ...(this.descriptionLocalizations && { description_localizations: this.descriptionLocalizations }),
            ...(this.options && { options: this.options.map((option) => option.toJSON()) }),
        };
        if (this.subCommands) {
            const commands = [];
            this.subCommands.forEach((command) => {
                commands.push(command.toJSON());
                this.subCommandsCollection.set(command.name, command);
            });
            response['options'] ? response['options'].push(commands) : response['options'] = commands;
        }
        if (this.subCommandGroups) {
            const groups = [];
            this.subCommandGroups.forEach((group) => {
                groups.push(group.toJSON());
                this.subCommandGroupsCollection.set(group.name, group);
            });
            response['options'] ? response['options'].push(groups) : response['options'] = groups;
        }
        return response;
    }
}
exports.SlashCommand = SlashCommand;
